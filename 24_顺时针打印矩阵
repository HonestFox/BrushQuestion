/*
				儿童节快乐！
					    ___====-_  _-====___
           _		--^^^#####//      \\#####^^^--_
		 _-^##########// (    ) \\##########^-_
       -############//  |\^^/|  \\############-
     _/############//   (@::@)   \\############\_
    /#############((     \\//     ))#############\
   -###############\\    (oo)    //###############-
  -#################\\  / VV \  //#################-
 -###################\\/      \//###################-
_#/|##########/\######(   /\   )######/\##########|\#_
|/ |#/\#/\#/\/  \#/\##\  |  |  /##/\#/  \/\#/\#/\#| \|
`  |/  V  V  `   V  \#\| |  | |/#/  V   '  V  V  \|  '
   `   `  `      `   / | |  | | \   '      '  '   '
                    (  | |  | |  )
                   __\ | |  | | /__
                  (vvv(VVV)(VVV)vvv)
                  

*/
#include <iostream>
#include <vector>
using namespace std;
/*
题目描述:
输入一个矩阵，按照从外向里以顺时针的顺序依次打印出每一个数字，
例如，如果输入如下矩阵： 
	1   2   3   4 
	5   6	  7   8 
	9	 10 11 12 
	13 14 15 16 
则依次打印出数字1,2,3,4,8,12,16,15,14,13,9,5,6,7,11,10.
*/

class Solution
{
public:
	vector<int> printMatrix(vector<vector<int> > matrix) 
	{
		int max_line = matrix.size();
		int max_col = matrix[0].size();
		int size = max_line * max_col;
		int count = 0;
		int min_line = 0;
		int min_col = 0;
		int cur_line = 0;
		int cur_col = 0;
		vector<int> ret;
		while (count < size)
		{
			//横，从左向右
			for (cur_col; cur_col < max_col; ++cur_col)
			{

				ret.push_back(matrix[cur_line][cur_col]);
				count++;
			}
			cur_col = max_col - 1;
			cur_line = min_line + 1;
			min_line++;
			//纵，从上到下
			for (cur_line; cur_line < max_line; cur_line++)
			{
				ret.push_back(matrix[cur_line][cur_col]);
				count++;
			}
			cur_col = max_col - 2;
			cur_line = max_line - 1;
			max_col--;
			//横，从右到左
			for (cur_col; cur_col >= min_col; cur_col--)
			{
				ret.push_back(matrix[cur_line][cur_col]);
				count++;
			}
			cur_col = min_col;
			cur_line = max_line - 2;
			max_line--;
			//纵，从下到上
			for (cur_line; cur_line >= min_line; cur_line--)
			{
				ret.push_back(matrix[cur_line][cur_col]);
				count++;
			}
			cur_col = min_col + 1;
			cur_line = min_line;
			min_col++;
		}
		return ret;
	}
};

int main()
{
	//vector<vector<int>> matrix = { { 1,2} };
	//vector<vector<int>> matrix = { {1,2,3,4}, {5,6,7,8}, {9,10,11,12}, {13,14,15,16} };
	vector<vector<int>> matrix = { { 1,2}, {3, 4} };
	vector<int> ret = Solution().printMatrix(matrix);
	for (auto &i : ret)
	{
		cout << i << " ";
	}
	cout << endl;
	return 0;
}
