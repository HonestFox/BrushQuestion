//有点失败，想了一晚上，还是只能搞出最笨的办法
//说到底还是想法没有成熟就急着敲代码，写了删删了写，时间大多浪费在这上面了
//这个题明天继续吧，太晚了。。

#include <iostream>
#include <cmath>
#include <vector>
using namespace std;
//
//*
//题目描述:
//把只包含因子2、3和5的数称作丑数（Ugly Number）。
//例如6、8都是丑数，但14不是，因为它包含因子7。
//习惯上我们把1当做是第一个丑数。求按从小到大的顺序的第N个丑数。
//*/



class Solution
{
public:
	int GetUglyNumber_Solution(int index)
	{
		if (index < 1)
		{
			return -1;
		}
		int count = 1;
		int ret = 1;
		vector<int> ValBox;
		ValBox.push_back(2);
		ValBox.push_back(3);
		ValBox.push_back(5);

		while (count < index)
		{
			//找当前最小的	
			int MinIndex = _GetMinIndex(ValBox);
			ret = ValBox[MinIndex];
			swap(ValBox[MinIndex], ValBox[ValBox.size() - 1]);
			ValBox.pop_back();
			++count;
			if (!_IsRepeat(ValBox, 2 * ret))
			{
				ValBox.push_back(2 * ret);
			}
			if (!_IsRepeat(ValBox, 3 * ret))
			{
				ValBox.push_back(3 * ret);
			}	if (!_IsRepeat(ValBox, 5 * ret))
			{
				ValBox.push_back(5 * ret);
			}
		}
		return ret;
	}
protected:
	int _GetMinIndex(const vector<int> &ValBox)
	{
		int Min = ValBox[0];
		int Index = 0;
		for (int i = 0; i < ValBox.size(); ++i)
		{
			if (ValBox[i] < Min)
			{
				Min = ValBox[i];
				Index = i;
			}
		}
		return Index;
	}
	bool _IsRepeat(const vector<int> &ValBox, int val)
	{
		for (auto &i : ValBox)
		{
			if (i == val)
			{
				return true;
			}
		}
		return false;

	}

};





void Test()
{
	for (int i = 0; i < 20; ++i)
	{
		cout << Solution().GetUglyNumber_Solution(i) << "   ";
	}
	cout << endl;
}


void SingleTest()
{
	cout << Solution().GetUglyNumber_Solution(11) << endl;
}

int main()
{
	//Test_GetVal();
	Test();
	cout << endl;
	SingleTest();
	return 0;
}






/*--------------------------这是之前的，写废了 -----------------------------------*/
//
////1，2，3，4，5，6，8，9，10，12，15, 16, 18, 20, 24, 25, 27, 30
//// 2^x * 3 ^y * 5 *z
//class Solution
//{
//public:
//	int GetUglyNumber_Solution(int index)
//	{
//		if (index < 1)
//		{
//			return -1;
//		}
//		int ret = 1;
//		int count = 1;
//		int IdxArr[3] = { 0, 0, 0 };
//		//	int MinTmp = 0;
//		int PureArr[3] = { 2, 3, 5 };
//		int PureArrIdx[3] = { 1, 1, 1 };  //相同元素的下标数组
//		int Addition4Val = 0;
//		int Addition4Tmp = 0;
//
//		while (count < index)
//		{
//			int IncIdx = 0;
//			//	int tmp = 0;
//			int tmp = ret;
//			//	int MinTmp = ret;
//			bool IsChanged = false;
//			//	while (tmp < ret)
//			//	{
//
//
//			++IdxArr[0];
//			++IdxArr[0];
//			Addition4Tmp = _GetVal(IdxArr);
//			--IdxArr[0];
//			--IdxArr[0];
//			int NormalIdx = 0;
//
//			for (int i = 0; i < 3; ++i)
//			{
//				++IdxArr[i];
//				tmp = _GetVal(IdxArr);
//				--IdxArr[i];
//				if (tmp > ret)
//				{
//					NormalIdx = i;
//					break;
//				}
//			}
//
//			if (Addition4Tmp > ret && Addition4Tmp < tmp)
//			{
//				tmp = Addition4Tmp;
//				NormalIdx = 0;
//			}
//
//			//if (MinTmp > tmp)
//			//{
//			//	MinTmp = tmp;
//			//}
//
//			//找到相同元素相乘最小的那个元素及其下标
//			while (PureArr[0] <= ret)
//			{
//				PureArr[0] *= 2;
//				++PureArrIdx[0];
//			}
//			while (PureArr[1] <= ret)
//			{
//				PureArr[1] *= 3;
//				++PureArrIdx[1];
//			}
//			while (PureArr[2] <= ret)
//			{
//				PureArr[2] *= 5;
//				++PureArrIdx[2];
//			}
//			int PureMinIdx = 0;									//最小元素的下标
//			int PureMinVal = PureArr[0];
//			for (int i = 0; i < 3; ++i)
//			{
//				if (PureMinVal > PureArr[i])
//				{
//					PureMinVal = PureArr[i];
//					PureMinIdx = i;
//				}
//			}
//
//			//比较
//		/*	if (PureMinVal < MinTmp)
//			{
//				MinTmp = PureMinVal;
//				for (int i = 0; i < 3; ++i)
//				{
//					IdxArr[i] = 0;
//				}
//				IdxArr[PureMinIdx] = PureArrIdx[PureMinIdx];
//			}*/
//			if (PureMinVal < tmp)
//			{
//				tmp = PureMinVal;
//				//for (int i = 0; i < 3; ++i)
//				//{
//				//	IdxArr[i] = 0;
//				//}
//			/*	IdxArr[PureMinIdx] = PureArrIdx[PureMinIdx];
//				NormalIdx = PureMinIdx;
//				--IdxArr[NormalIdx];*/
//			}
//		//	--IdxArr[NormalIdx];
//
//			if (NormalIdx == 2)
//			{
//				++IdxArr[IncIdx++];
//				if (IncIdx == 3)
//				{
//					IncIdx = 0;
//				}
//			}
//
//			//			}
//			ret = tmp;
//			++count;
//		}
//		return ret;
//	}
//protected:
//public:
//	int _GetVal(int *muls)
//	{
//		int ret = pow(2, *(muls + 0)) * pow(3, *(muls + 1)) * pow(5, *(muls + 2));
//		return ret;
//	}
//
//	int _GetPureVal(int num, int n)
//	{
//		return pow(num, n);
//	}
//
//	void ArrCpy(const int *src, int *dst, int sz)
//	{
//		for (int i = 0; i < sz; ++i)
//		{
//			*(dst + i) = *(src + i);
//		}
//	}
//};
//
//void Test_GetVal()
//{
//	int arr[3] = { 1, 0, 0 };
//	cout << Solution()._GetVal(arr) << endl;
//	cout << pow(2, 3) << endl;
//}
//
//void Test()
//{
//	for (int i = 0; i < 20; ++i)
//	{
//		cout << Solution().GetUglyNumber_Solution(i) << "   ";
//	}
//	cout << endl;
//}
//
//
//void SingleTest()
//{
//	cout << Solution().GetUglyNumber_Solution(9) << endl;
//}
//
//int main()
//{
//	//Test_GetVal();
//	Test();
//	cout << endl;
//	SingleTest();
//	return 0;
//}

