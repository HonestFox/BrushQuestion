#include <iostream>
#include <string>
using namespace std;

/*
题目描述L
汇编语言中有一种移位指令叫做循环左移（ROL）。
现在有个简单的任务，就是用字符串模拟这个指令的运算结果。
对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。
例如，字符序列S="abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！
*/


class Solution
{
public:
	string LeftRotateString(string str, int n)
	{
		int size = str.size();
		if (size < 2)
		{
			return str;
		}

		int step = n % size;
		if (size == n)
		{
			return str;
		}
		if (step < ( size / 2 + 1) )		//左移step
		{
			char *tmp = new char[step];
			for (int i = 0; i < size - step; ++i)
			{
				if (i < step)
				{
					tmp[i] = str[i];
				}
				str[i] = str[i + step];
			}
			for (int i = size - step; i < size; ++i)
			{
				str[i] = tmp[i - size + step];
			}

		}
		else								//右移(size - step)位
		{
			step = size - step;
			char *tmp = new char[step];
			for (int i = size - 1; i >= step; --i)
			{
				if (i >= size - step)
				{
					tmp[size - 1 - i] = str[i];
				}
				str[i] = str[i - step];
			}
			for (int i = 0; i < step; ++i)
			{
				str[i] = tmp[step - i - 1];
			}
		}
		return str;
	}
};

void Test()
{	
	string str1 = "";
	for (int i = 0; i < 12; ++i)
	{
		string ret = Solution().LeftRotateString(str1, i);
		cout << i <<" : " << ret << endl;
	}
}
int main()
{
	Test();
	return 0;
}
