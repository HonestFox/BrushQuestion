#include <iostream>
using namespace std;

/*
	题目描述:
	输入两个单调递增的链表，输出两个链表合成后的链表，当然我们需要合成后的链表满足单调不减规则
*/
struct ListNode
{
	int val;
	struct ListNode *next;
	ListNode(int x)
		:val(x)
		,next(NULL) 
	{}
};

class Solution 
{
public:
	ListNode* Merge(ListNode* pHead1, ListNode* pHead2)
	{
		if (pHead1 == NULL && pHead2 == NULL)
		{
			return NULL;
		}
		if (pHead1 == NULL)
		{
			return pHead2;
		}
		if (pHead2 == NULL)
		{
			return pHead1;
		}
		ListNode *cur1 = pHead1;
		ListNode *cur2 = pHead2;
		ListNode *NewNode = NULL;
		if (cur1->val <= cur2->val)
		{
			NewNode = cur1;
			cur1 = cur1->next;
		}
		else
		{
			NewNode = cur2;
			cur2 = cur2->next;
		}
		ListNode *NewHead = NewNode;
		while (cur1 != NULL && cur2 != NULL)
		{
			if (cur1->val <= cur2->val)
			{
				NewNode->next = cur1;
				NewNode = NewNode->next;
				cur1 = cur1->next;
			}
			else
			{
				NewNode->next = cur2;
				NewNode = NewNode->next;
				cur2 = cur2->next;
			}
		}
		if (cur1 != NULL)
		{
			NewNode->next = cur1;
		}
		else if (cur2 != NULL)
		{
			NewNode->next = cur2;
		}
		return NewHead;
	}

};

int main()
{
	ListNode *Nodea1 = new ListNode(1);
	ListNode *Nodea2 = new ListNode(3);
	ListNode *Nodea3 = new ListNode(5);
	Nodea1->next = Nodea2;
	Nodea2->next = Nodea3;
	Nodea3->next = NULL;


	ListNode *Nodeb1 = new ListNode(2);
	ListNode *Nodeb2 = new ListNode(4);
	Nodeb1->next = Nodeb2;
	Nodeb2->next = NULL;

	ListNode *NewNode = Solution().Merge(Nodea1, Nodeb1);

	return 0;
}
