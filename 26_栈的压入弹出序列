#include <iostream>
#include <vector>
using namespace std;

/*
题目描述:
输入两个整数序列，第一个序列表示栈的压入顺序，请判断第二个序列是否为该栈的弹出顺序。
假设压入栈的所有数字均不相等。
例如序列1,2,3,4,5是某栈的压入顺序，序列4，5,3,2,1是该压栈序列对应的一个弹出序列，但4,3,5,1,2就不可能是该压栈序列的弹出序列。
*/

class Solution 
{
public:
	bool IsPopOrder(vector<int> &pushV, vector<int> &popV) const
	{
		vector<int> tmp;
		if (pushV.size() != popV.size())
		{
			return false;
		}	
		if (pushV.size() == 0)
		{
			return false;
		}

		int esc_index = 0;
		for (size_t i = 0; i < pushV.size(); ++i)
		{
			tmp.push_back(pushV[i]);
			int cur_index = tmp.size() - 1;
			while (cur_index < ( tmp.size() ) &&tmp[cur_index] == popV[esc_index])
			{
				tmp.pop_back();
				++esc_index;
				--cur_index;
			}
			}
		if (tmp.empty())
		{
			return true;
		}
		return false;
	}
};

int main()
{
	vector<int> v1 = { 1, 2, 3 ,4 ,5 };
	vector<int> v2 = { 4, 5, 3, 2, 1};
	vector<int> v3 = { 4, 3, 5, 1, 2 };
	cout << Solution().IsPopOrder(v1, v2) << endl;
	cout << Solution().IsPopOrder(v1, v3) << endl;


	return 0;
}
