#include <iostream>
using namespace std;

/*
题目描述:
一个链表中包含环，请找出该链表的环的入口结点。
*/



struct ListNode
{
	int val;
	struct ListNode *next;

	ListNode(int x) 
		:val(x)
		,next(NULL) 
	{}
};

class Solution 
{
public:
	ListNode* EntryNodeOfLoop(ListNode* pHead)
	{
		if (pHead == NULL || pHead->next == NULL || pHead->next->next == NULL)
		{
			return NULL;
		}
		if (pHead->next == pHead)
		{
			return pHead;
		}
		ListNode *FastNode = pHead;
		ListNode *SlowNode = pHead;
		while (FastNode != SlowNode || FastNode == pHead)
		{
			FastNode = FastNode->next->next;
			SlowNode = SlowNode->next;
			if (SlowNode == pHead)
			{
				return pHead;;
			}
		}
		ListNode *pos = FastNode;
		ListNode *cur = pHead;
		while (FastNode != cur)
		{
			FastNode = FastNode->next;
			cur = cur->next;
		}
		return cur;
	}
};

void Test()
{
	//ListNode *Node1 = new ListNode(1);
	//ListNode *Node2 = new ListNode(2);
	//ListNode *Node3 = new ListNode(3);
	//ListNode *Node4 = new ListNode(4);
	//ListNode *Node5 = new ListNode(5);

	//ListNode *Node0 = new ListNode(0);

	//Node0->next = Node1;
	//Node1->next = Node2;
	//Node2->next = Node3;
	//Node3->next = Node4;
	//Node4->next = Node5;
	//Node5->next = Node2;


	//ListNode *Node1 = new ListNode(1);
	//ListNode *Node2 = new ListNode(2);
	//Node1->next = Node2;
	//Node2->next = Node1;

	//ListNode *ret = (Solution().EntryNodeOfLoop(Node1));

	ListNode *Node1 = new ListNode(1);
	ListNode *Node2 = new ListNode(2);
	ListNode *Node3 = new ListNode(3);
	ListNode *Node4 = new ListNode(4);
	ListNode *Node5 = new ListNode(5);

	Node1->next = Node2;
	Node2->next = Node3;
	Node3->next = Node4;
	Node4->next = Node5;
	
	Node5->next = Node3;

	ListNode *ret = (Solution().EntryNodeOfLoop(Node1));

	cout << ret->val << endl;



}


int main()
{
	Test();
	return 0;
}
